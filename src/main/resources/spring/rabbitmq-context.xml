<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/rabbit
						http://www.springframework.org/schema/rabbit/spring-rabbit-1.6.xsd
						http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans-4.2.xsd">

	<!-- RabbitMQ的连接工厂 -->
	<rabbit:connection-factory id="connectionFactory" host="192.168.0.201" port="5672" 
		username="admin" password="admin" virtual-host="/admin" />
		
	<!-- MQ的管理 -->
	<rabbit:admin connection-factory="connectionFactory" />
	
	<!--------------------------- 生产者: 定义交换机 --------------------------->
	<!-- topic交换机, 使用时自动声明交换机，不存在则创建(durable:true持久化[default], false非持久化) -->
	<rabbit:topic-exchange name="xxx-item-exchange" auto-declare="true" durable="true" />
	
	<!-- Rabbit模板，定义连接工厂及定义exchange交换机 -->
	<rabbit:template id="template" connection-factory="connectionFactory" exchange="xxx-item-exchange" />
	<!-- map.put("itemId", itemId);
		 map.put("type", type);
		 map.put("date", date);	
		 this.rabbitTemplate.convertAndSend("item." + type, MAPPER.writeValueAsString(map)); 
	-->	
		
	<!--------------------------- 消费者: 定义队列 --------------------------->
	<!-- 队列，admin自动声明(durable:true持久化[default], false非持久化) -->
	<rabbit:queue name="xxx-web-item-queue" auto-declare="true" durable="true"/>
	
	<!-- 消费者 -->
	<bean id="foo" class="cn.itcast.rabbitmq.spring.Foo" />
	<!-- 
		 解析生产者发送的消息JSON
		 JsonNode jsonNode = MAPPER.readTree(map);
		 Long itemId = jsonNode.get("itemId").asLong();
		 this.redisService.del(key前缀 + itemId);
	 -->
	
	<!-- 队列监听 -->
	<rabbit:listener-container connection-factory="connectionFactory">
		<rabbit:listener ref="foo" method="listen" queue-names="xxx-web-item-queue" />
	</rabbit:listener-container>
	
	<!--------------------------- 交换机与队列的绑定 --------------------------->
	<!-- 1、通过生产者xml配置文件绑定
			1、生产者定义队列
			<rabbit:queue name="xxx-web-item-queue" auto-declare="true" durable="true"/>
		 	2、生产者定义direct交换机，绑定队列，设置routingKey
		 	<rabbit:direct-exchange name="xxx-item-exchange" auto-declare="true" durable="true">
			    <rabbit:bindings>
					<rabbit:binding queue="xxx-web-item-queue" pattern="item.update"/>
					<rabbit:binding queue="xxx-web-item-queue" pattern="item.insert"/>
				</rabbit:bindings>
			</rabbit:fanout-exchange>
			或 生产者定义topic交换机，绑定队列，设置通配符
		 	<rabbit:topic-exchange name="xxx-item-exchange" auto-declare="true" durable="true">
			    <rabbit:bindings>
					<rabbit:binding queue="xxx-web-item-queue" pattern="item.*"/>
				</rabbit:bindings>
			</rabbit:fanout-exchange>
		 	  
		 2、通过RabbitMQ界面管理工具进行手动灵活绑定(推荐)
			 1、进入Exchanges,找到相应的交换机xxx-item-exchange，点击进入
			 2、Add binding from this exchange
			 	To queue : 输入队列名称xxx-web-item-queue
			 	Routing key : item.update
			 	单击Bind绑定
	-->

	<!-- --------------------------------------------------------------------------------------------- -->	
	<!-- Rabbit模板，指定连接工厂以及定义exchange交换器及routingKey -->
	<rabbit:template id="amqpTemplate" connection-factory="connectionFactory" exchange="fanoutExchange" />
	<!-- <rabbit:template id="amqpTemplate" connection-factory="connectionFactory"
		exchange="fanoutExchange" routing-key="foo.bar" /> -->

	<!-- MQ的管理，包括队列、交换器等 -->
	<rabbit:admin connection-factory="connectionFactory" />

	<!-- 队列，admin自动声明(durable:true持久化[default], false非持久化) -->
	<rabbit:queue name="myQueue" auto-declare="true" durable="true"/>
	
	<!-- 交换器模式，admin自动声明(durable:true持久化[default], false非持久化) -->
	<rabbit:fanout-exchange name="fanoutExchange" auto-declare="true" durable="true">
		<rabbit:bindings>
			<rabbit:binding queue="myQueue"/>
		</rabbit:bindings>
	</rabbit:fanout-exchange>
	
	<!-- 路由通配符模式 -->
	<!-- <rabbit:topic-exchange name="myExchange">
		<rabbit:bindings>
			<rabbit:binding queue="myQueue" pattern="foo.*" />
		</rabbit:bindings>
	</rabbit:topic-exchange> -->

	<!-- 消费者队列监听 -->
	<rabbit:listener-container connection-factory="connectionFactory">
		<rabbit:listener ref="foo" method="listen" queue-names="myQueue" />
	</rabbit:listener-container>

	<bean id="foo" class="cn.itcast.rabbitmq.spring.Foo" />
</beans>